If given error 0xc000007b when starting exe outside of codeblocks,
Go to Settings -> Compiler, and check the flag for "-static".
However, this bloats the exe from 50kb to 2343kb.


The & character can create references to other variables.
Changing the reference (as if it was a variable) changes the value of the original variable. 
//---
int x = 10;
int& a = x;
a += 5;
cout << x << endl;
//15


The following prints the memory address for the "food" variable.
cout << &food;


The following is a pointer, which contains the address for the "food" variable.
string* foodPtr = &food;
The * also dereferences a pointer. The following prints the value of the "food" variable.
cout << *foodPtr << endl;


Using & for the input parementers of a function changes the variable declared before call.
"pass by reference" instead of the default "pass by copy".
It saves RAM as well! use "constant" to ensure it isn't accidentally changed as well.


The following includes a whole bunch of library headers to ensure most things are available.
It is slow and takes up a lot of memory, but convenient in certain situations.
#include <bits/stdc++.h>


A vector is sequential, but can grow dynamically. It's also slower than an array.
An array is fixed in length, but fast to access from.
A list is usually linked, with its items spread out in memory. Pretty quick.


A function must be declared (but not necessarily defined) before it is called.
Generally use sequence: FunctionDeclaration -> Main -> FunctionDefinition


The variable used to pass data into a function is called a PARAMETER.
The value put into that parameter is called an ARGUMENT.


Multiple functions can share a name, but with different return/parameter types.


"Encapsulation" is about restricting direct class variable access.
Using setter and getter functions are prefered.
Class variables are private by dafault, and should stay private as often as possible.


"Inheritance" is about a derivative class (child) inheriting from a base class (parent).
class Vehicle {
    //parent stuff
};
class Car: public Vehicle {
    //child stuff
};


Inheritance from multiple classes is possible.
class MyChildClass: public MyClass, public MyOtherClass {
    //stuff
};
int main() {
    MyChildClass myObj;
    myObj.myFunction();
    myObj.myOtherFunction();
    return 0;
}


Public inheritance makes public members of the base class
    public in the derived class, and the protected members
    of the base class remain protected in the derived class.
Protected inheritance makes the public and protected members
    of the base class protected in the derived class.
Private inheritance makes the public and protected members
    of the base class private in the derived class.
Note: private members of the base class are inaccessible
    to the derived class.


A childclass can have a method with the same names as its parent,
but with a different implementation.


ofstream    output file stream  Creates and writes to files.
ifstream    input file stream   Reads from files.
ifstream    filestream          Does everything.


Exceptions let you reroute data when something unexpected happened.
NOTE: special case is "catch (...)" is able to catch any type of thrown exception.
try {
  int age = 15;
  if (age >= 18) {
    cout << "Access granted - you are old enough.";
  } else {
    throw (age);
  }
}
catch (int myNum) {
  cout << "Access denied - You must be at least 18 years old.\n";
  cout << "Age is: " << myNum;
}


C++ does not accept the use of single quotes for string literals.